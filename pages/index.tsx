import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import { useEffect, useMemo, useState } from "react";
import clsx from "clsx";
import Tile from "@/components/Tile";

const inter = Inter({ subsets: ["latin"] });

const resourceTypes = ["ore", "sheep", "brick", "wood", "wheat", "desert"];

const RESOURCES = [
  "ore",
  "ore",
  "ore",
  "brick",
  "brick",
  "brick",
  "sheep",
  "sheep",
  "sheep",
  "sheep",
  "wood",
  "wood",
  "wood",
  "wood",
  "wheat",
  "wheat",
  "wheat",
  "wheat",
];
const NUMS = [2, 3, 3, 4, 4, 5, 5, 6, 6, 8, 8, 9, 9, 10, 10, 11, 11, 12];

const expansionResources = [
  "ore",
  "ore",
  "ore",
  "ore",
  "ore",
  "brick",
  "brick",
  "brick",
  "brick",
  "brick",
  "sheep",
  "sheep",
  "sheep",
  "sheep",
  "sheep",
  "sheep",
  "wood",
  "wood",
  "wood",
  "wood",
  "wood",
  "wood",
  "wheat",
  "wheat",
  "wheat",
  "wheat",
  "wheat",
  "wheat",
];
const expansionNums = [
  2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11,
  11, 11, 12, 12,
];

function shuffle(array: any[]) {
  let currentIndex = array.length,
    temporaryValue,
    randomIndex;

  while (0 !== currentIndex) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

interface Tile {
  resource: string;
  num: number;
}

export default function Home() {
  const [board, setBoard] = useState<Tile[]>([]);
  const [mode, setMode] = useState<Mode>("normal");
  const [offsets, setOffsets] = useState<any[]>([]);

  const size = useMemo(() => {
    return mode === "normal" ? 17.5 : 16;
  }, [mode]);

  const generateBoard = () => {
    const board: Tile[] = [];
    const resources = mode === "normal" ? RESOURCES : expansionResources;
    const nums = mode === "normal" ? NUMS : expansionNums;

    const shuffledResources = shuffle(resources);
    const shuffledNums = shuffle(nums);

    shuffledResources.forEach((resource, index) => {
      board.push({
        resource,
        num: shuffledNums[index],
      });
    });

    board.push({
      resource: "desert",
      num: 0,
    });

    if (mode === "expanded") {
      board.push({
        resource: "desert",
        num: 0,
      });
    }

    setBoard(shuffle(board));
  };

  console.log(board, offsets);

  const generateOffsets = (e: number, mode: Mode) => {
    let r = 0.866 * e,
      s = e,
      a = [];

    const board = {
      tiles_per_row: [3, 4, 5, 4, 3],
      row_step: 0.73 * s,
      center_row: Math.floor([3, 4, 5, 4, 3].length / 2),
      cell_step: 0.99 * r,
    };

    if (mode === "expanded") {
      board.tiles_per_row = [1, 2, 3, 4, 3, 4, 3, 4, 3, 2, 1];
      board.center_row = Math.floor(board.tiles_per_row.length / 2);
      board.cell_step = 1.51 * s * 0.99;
      board.row_step = r / 1.99;
    }

    for (let e = 0; e < board.tiles_per_row.length; e++) {
      var o = e,
        d = board;

      const rowLevel = o - Number(d.center_row);
      const y = 50 + rowLevel * d.row_step;
      const xIsEvenShift = ((o % 2) * d.cell_step) / 2;
      const xFirstCellShift = Math.floor(d.tiles_per_row[o] / 2) * d.cell_step;

      for (let e = 0; e < d.tiles_per_row[o]; e++) {
        a.push({
          left: 50 - xFirstCellShift + xIsEvenShift + e * d.cell_step,
          top: y,
        });
      }
    }
    return a;
  };

  useEffect(() => {
    generateBoard();
  }, [mode]);

  useEffect(() => {
    setOffsets(generateOffsets(size, mode));
  }, [board, size, mode]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <header className="newTitle" id="title">
          <h1>
            <span className="theBetterTitle">The Better</span>
            <br />
            <span className="catanTitle">Catan Board</span>
            <br />
            <span className="generatorTitle">Generator</span>
          </h1>
          {/* <nav className="myNav">
            <ul>
              <li className="myLi">
                <a
                  className="links"
                  href="https://forms.gle/JuTFRjxeffMhPYss6"
                  target="_blank"
                >
                  Feedback
                </a>
              </li>
              <li className="myLi">
                <a
                  className="links"
                  href="https://www.bunge.io"
                  target="_blank"
                >
                  Contact
                </a>
              </li>
            </ul>
          </nav> */}
          <section id="top_content">
            <section id="map-select">
              <div className="map-select-menu-row-center">
                <button onClick={() => setMode("normal")}>
                  <label className="map-button selected-map-button">
                    Classic
                  </label>
                </button>

                <button onClick={() => setMode("expanded")}>
                  <a className="map-links" href="#">
                    <label className="map-button available-map-button">
                      Expansion
                    </label>
                  </a>
                </button>
              </div>
            </section>
            <div className="description">
              <p>
                Map generator for Settlers of Catan for Normal and Expansion
                Pack. Use the generation options to build a board that works for
                your house rules.
              </p>
            </div>
            <section id="inline-options">
              {/* <button
                id="btnOps"
                type="button"
                className="commonOpsbutton"
                onclick="toggleOptions()"
              >
                Options
              </button>
              <button
                type="button"
                className="commonShuffle"
                onclick="generateBoard()"
              >
                Shuffle
              </button> */}
            </section>
          </section>
        </header>

        <section className="commonNormalBoard board relative" id="board">
          {board.length > 0 && offsets.length > 0 && (
            <>
              <div
                className={clsx(`${mode}BorderCommon`, `border-${mode}`)}
              ></div>
              {board.map((tile, index) => (
                <Tile
                  key={index}
                  num={tile.num}
                  resource={tile.resource}
                  offset={{ ...offsets[index] }}
                  mode={mode}
                  index={index}
                />
              ))}
            </>
          )}
        </section>

        <section id="popmenu" className="menuToggle">
          <h2>Generation Custom Rules</h2>
          <br />
          {/* <div className="settingswrap">
            <input id="selected-map" type="hidden" value="normal" />
            <div className="menu-row">
              <label className="mylabel">6 & 8 Can Touch</label>
              <input
                id="adjacent_6_8_input"
                onchange="toggleSetting('6_8')"
                type="checkbox"
              />
              <br />
            </div>
            <div className="menu-row">
              <label className="mylabel">2 & 12 Can Touch</label>
              <input
                id="adjacent_2_12_input"
                onchange="toggleSetting('2_12')"
                type="checkbox"
              />
              <br />
            </div>
            <div className="menu-row">
              <label className="mylabel">Same Numbers Can Touch</label>
              <input
                id="adjacent_same_numbers_input"
                onchange="toggleSetting('same_number')"
                type="checkbox"
              />
              <br />
            </div>
            <div id="sameResourceSetting" className="menu-row">
              <label className="mylabel">Same Resource Can Touch</label>
              <input
                id="adjacent_same_resource_input"
                onchange="toggleSetting('same_resource')"
                type="checkbox"
              />
              <br />
            </div>
            <button
              type="button"
              className="menuclosebutton"
              onclick="toggleOptions()"
            >
              Close Options
            </button>
          </div> */}
        </section>
      </main>
    </>
  );
}
